# -*- coding: utf-8 -*-
"""Import_Codes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yef83zePUlPlfPhhR_bIMwU_PkCA76US
"""

# Commented out IPython magic to ensure Python compatibility.
#XXXXXX     CODICI PER IMPORTARE LE LIBRERIE PRINCIPALI DI PYTHON      XXXXXXXXX


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
# %config InlineBackend.figure_format = 'svg'
plt.rcParams.update({'font.size': 10, 'font.style': 'normal', 'font.family':'serif'})
from google.colab import files
import datetime as dt


#XXXXXX    IMPORTARE ED ESPORTARE FILES SU PYTHON   XXXXXX


from google.colab import drive
drive.mount('/content/drive')
#codice per montare google drive.

df = pd.read_excel('/content/drive/MyDrive/Python_Files/Python_Import/Python_CTs_FM.xlsx', header = [0])
#comando per salvare il data frame in formato csv per excel. Il file viene salvato in automatico su google drive.
#mettere read_xslx per aprire excel
#aggiungere sheet_name = 'nome del foglio', per aprire uno specifico foglio del documento.

df2.to_excel('/content/drive/MyDrive/Python_Files/Python_Export/20220318_LA_ASPECT_CT_list.xlsx')
#comando per salvare il data frame in formato csv per excel. Il file viene salvato in automatico su google drive.
#mettereto_excel per salvare in excel


#XXXXXX    CODICI PER MODIFICARE IL DATAFRAME     XXXXXXXXX

#XXX  RIGHE XXX

df.drop([0, 1])
#comando per eliminare righe usando un indice

df = df.drop([0])
#comando per eliminare righe usando un indice, settare il nuovo df 

#XXX  COLONNE  XXX

df1 = df1.rename(columns = {'Hix number\n':'ciao'})
#comando per rinominare una specifica colonna su pandas

df1 = df1.sort_values('BIRTH DATE')
#comando per sortare tutto il dataframe! rispetto ad una colonna

df1 = df1.drop(['CT-2 ID','CT -2 date'], 1)
#comando per eliminare una o piu colonne da una tabella df

df2 = df1[df1['CT -1 date']!='99/99/9999']
#comando per eliminare una stringa dalla tabella in riferimento ad una determinata colonna


#XXXXXX   CODICI PER MODIFICARE IL FORMATO DATA TEMPO   XXXXXXX


df1['CT -2 date'] =  pd.to_datetime(df1['CT -2 date'], format='%d/%m/%Y')
#formula per convertire le date in formato stringa in formato data.

df4['CT -1 date'] =  pd.to_datetime(df4['CT -1 date'])
#formula per convertire le date in formato stringa in formato data.

df1["CT DATE"] = pd.to_datetime(df1["CT DATE"]).dt.strftime('%Y')
#comando per cambiare o impostare un diverso formato data tempo ('%Y-%m-%d'). Non compatibile con str, necessaria conversione.

df1['nb_months CT-2'] = round((df1["CT -2 date"] - df1["BIRTH DATE"])/np.timedelta64(1, 'M'),0)
#comando per calcolare la differenza di età tra due colonne espressa in mesi ed arrotondata a due decimali. Per arrotondare inserisco il
#comando round seguito alla fine dalla virgola e dal numero di decimali che voglio ottenere.

def to_int(stringa): # con def definisci le funzioni, la cosa tra parentesi è l'input
    return int(stringa) #ti ritorna il cast ad intero
    # apply applica una funzione ad ogni elemento della colonna
#creo una funzione che trasforma una stringa in intero

df1["CT -2 date"] = df1["CT -2 date"].apply( to_int)
df1["1ST POSTITIVE ASP"] = df1["1ST POSTITIVE ASP"].apply( to_int) # apply applica la funzione a tutti gli elementi
df1['nr_years CT -2'] = df1["1ST POSTITIVE ASP"] - df1["CT -2 date"]
#comando per calcolare la differenza di età tra due colonne espressa in mesi ed arrotondata a due decimali. Per arrotondare inserisco il
#comando round seguito alla fine dalla virgola e dal numero di decimali che voglio ottenere.


#XXXXXX   CODICI PER LAVORARE SU PIU DATAFRAME CONTEMPORANEAMENTE  XXXXXXX

df2 = pd.merge(df, df1, on = 'ciao')
#comando per fare merge di un df su un altro ottenendo solo le linee in comune
